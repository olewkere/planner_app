import asyncio
import os
from datetime import datetime, timedelta
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
import psycopg2
import psycopg2.extras
from dotenv import load_dotenv

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))

def get_db():
    return psycopg2.connect(os.getenv("DATABASE_URL"))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç! –Ø –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø–æ–¥—ñ–π. –¢–≤—ñ–π ID: {user_id}\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤."
    )

async def create_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group_name = " ".join(context.args) if context.args else "–ù–æ–≤–∞ –≥—Ä—É–ø–∞"
    
    db = get_db()
    cursor = db.cursor()
    try:
        group_id = f"group_{user_id}_{int(datetime.now().timestamp())}"
        cursor.execute("INSERT INTO groups (id, name, members) VALUES (%s, %s, %s)", 
                      (group_id, group_name, [user_id]))
        db.commit()
        
        invite_link = f"https://t.me/share/url?url=https://t.me/your_bot_username?start=join_{group_id}"
        await update.message.reply_text(
            f"–ì—Ä—É–ø–∞ '{group_name}' —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n"
            f"ID –≥—Ä—É–ø–∏: {group_id}\n"
            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: {invite_link}"
        )
    finally:
        cursor.close()
        db.close()

async def check_reminders():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É"""
    while True:
        db = get_db()
        cursor = db.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        try:
            now = datetime.now()
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–¥—ñ—ó, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            cursor.execute("""
                SELECT * FROM events 
                WHERE reminder_time <= %s AND reminder_time > %s
            """, (now, now - timedelta(minutes=1)))
            
            reminders = cursor.fetchall()
            
            for reminder in reminders:
                message = f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n"
                message += f"–ü–æ–¥—ñ—è: {reminder['title']}\n"
                if reminder['description']:
                    message += f"–û–ø–∏—Å: {reminder['description']}\n"
                message += f"–ß–∞—Å: {reminder['event_time']}\n"
                
                if reminder['group_id']:
                    message += f"–ì—Ä—É–ø–∞: {reminder['group_id']}"
                
                await bot.send_message(chat_id=reminder['user_id'], text=message)
                
        finally:
            cursor.close()
            db.close()
        
        await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

async def main():
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("creategroup", create_group))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –≤ –æ–∫—Ä–µ–º–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ
    asyncio.create_task(check_reminders())
    
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main()) 
